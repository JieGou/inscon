<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:BlockSpecifics="clr-namespace:Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel.BlockSpecifics"
    xmlns:ComponentModel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
    xmlns:Controls="clr-namespace:Microsoft.Practices.EnterpriseLibrary.Configuration.Design.Controls"
    xmlns:Converters="clr-namespace:Microsoft.Practices.EnterpriseLibrary.Configuration.Design.Converters"
    xmlns:Microsoft_Windows_Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:ViewModel="clr-namespace:Microsoft.Practices.EnterpriseLibrary.Configuration.Design.ViewModel"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime;component/Resources/Converters.xaml" />
        <ResourceDictionary Source="/Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime;component/Resources/Brushes.xaml" />
        <ResourceDictionary Source="/Microsoft.Practices.EnterpriseLibrary.Configuration.DesignTime;component/Resources/ExpanderDictionary.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <System:Double x:Key="SharedColumnMinWidth">100</System:Double>
    <GridLength x:Key="SharedColumnWidth">250</GridLength>

    <Style x:Key="ContextAdderButtonMenuStyle" TargetType="{x:Type Controls:ContextMenuButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ContentControl
                        x:Name="AddButtonVisual"
                        Background="{DynamicResource ElementCommandBackgroundBrush}"
                        Focusable="False"
                        Foreground="{DynamicResource ElementCommandNormalBrush}">
                        <Canvas
                            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                            Width="17"
                            Height="17">
                            <Path
                                Canvas.Left="-0.499999"
                                Canvas.Top="-0.499999"
                                Width="18"
                                Height="18"
                                Data="F1 M 3,9.53674e-007L 14,9.53674e-007C 15.6569,9.53674e-007 17,1.34315 17,3L 17,14C 17,15.6569 15.6569,17 14,17L 3,17C 1.34315,17 5.23122e-007,15.6569 5.23122e-007,14L 5.23122e-007,3C 5.23122e-007,1.34315 1.34315,9.53674e-007 3,9.53674e-007 Z "
                                Fill="{Binding Background, ElementName=AddButtonVisual}"
                                Stretch="Fill"
                                Stroke="#00949494"
                                StrokeLineJoin="Round" />
                            <Path
                                Canvas.Left="-0.499999"
                                Canvas.Top="-0.499999"
                                Width="18"
                                Height="18"
                                Data="F1 M 3,9.53674e-007L 14,9.53674e-007C 15.6569,9.53674e-007 17,1.34315 17,3L 17,14C 17,15.6569 15.6569,17 14,17L 3,17C 1.34315,17 5.23122e-007,15.6569 5.23122e-007,14L 5.23122e-007,3C 5.23122e-007,1.34315 1.34315,9.53674e-007 3,9.53674e-007 Z "
                                Stretch="Fill"
                                Stroke="{DynamicResource ElementCommandNormalBrush}"
                                StrokeLineJoin="Round" />

                            <Path
                                Canvas.Left="7"
                                Canvas.Top="3"
                                Width="3"
                                Height="11"
                                Data="F1 M 8.5,4.5L 8.5,12.5"
                                Stretch="Fill"
                                Stroke="{DynamicResource ElementCommandShadowBrush}"
                                StrokeEndLineCap="Round"
                                StrokeLineJoin="Round"
                                StrokeStartLineCap="Round"
                                StrokeThickness="3" />
                            <Path
                                Canvas.Left="3.00001"
                                Canvas.Top="7.00001"
                                Width="11"
                                Height="3"
                                Data="F1 M 4.50001,8.50001L 12.5,8.50001L 4.50001,8.50001 Z "
                                Stretch="Fill"
                                Stroke="{DynamicResource ElementCommandShadowBrush}"
                                StrokeEndLineCap="Round"
                                StrokeLineJoin="Round"
                                StrokeStartLineCap="Round"
                                StrokeThickness="3" />

                            <Path
                                Canvas.Left="6.93334"
                                Canvas.Top="3.03334"
                                Width="2"
                                Height="10"
                                Data="F1 M 7.93334,4.03334L 7.93334,12.0333"
                                Stretch="Fill"
                                Stroke="{Binding Foreground, ElementName=AddButtonVisual}"
                                StrokeEndLineCap="Round"
                                StrokeLineJoin="Round"
                                StrokeStartLineCap="Round"
                                StrokeThickness="2" />
                            <Path
                                Canvas.Left="2.93334"
                                Canvas.Top="7.03334"
                                Width="10"
                                Height="2"
                                Data="F1 M 3.93334,8.03334L 11.9333,8.03334L 3.93334,8.03334 Z "
                                Fill="#FFACACAC"
                                Stretch="Fill"
                                Stroke="{Binding Foreground, ElementName=AddButtonVisual}"
                                StrokeEndLineCap="Round"
                                StrokeLineJoin="Round"
                                StrokeStartLineCap="Round"
                                StrokeThickness="2" />
                        </Canvas>
                    </ContentControl>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="AddButtonVisual" Property="Foreground" Value="{DynamicResource ElementCommandMouseOverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContextMenuStyle">
        <Style.Resources>
            <!--  This is here as setting MenuItem.AutomatinProperties.AutomationId does not work  -->
            <Style TargetType="{x:Type Controls:SelectionNotifyingMenuItem}">
                <Setter Property="AutomationProperties.AutomationId" Value="{Binding Title}" />
            </Style>

            <HierarchicalDataTemplate DataType="{x:Type ViewModel:CommandModel}" ItemsSource="{Binding ChildCommands}">
                <Label ToolTip="{Binding Title}">
                    <Label.Content>
                        <AccessText
                            MaxWidth="450"
                            Text="{Binding Title}"
                            TextTrimming="CharacterEllipsis" />
                    </Label.Content>
                </Label>
            </HierarchicalDataTemplate>

        </Style.Resources>
    </Style>

    <Style x:Key="BindablePropertyStyle" TargetType="{x:Type FrameworkElement}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="TextBlock.FontWeight" Value="Bold" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding Path=(Validation.Errors), RelativeSource={RelativeSource Self}, Converter={StaticResource ErrorsToStringConverter}}" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="false">
                <Setter Property="ToolTip" Value="{Binding BindableValue}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Controls:SelectionNotifyingContextMenu
        x:Key="SelectionNotifyingContextMenu"
        ItemsSource="{Binding Commands}"
        Style="{StaticResource ContextMenuStyle}" />

    <Style
        x:Key="ElementContainerWithContextMenu"
        BasedOn="{StaticResource {x:Type Controls:ElementModelContainer}}"
        TargetType="{x:Type Controls:ElementModelContainer}">
        <Setter Property="ContextMenu" Value="{StaticResource SelectionNotifyingContextMenu}" />
    </Style>


    <DataTemplate DataType="{x:Type ViewModel:ElementViewModel}">
        <Controls:ElementModelContainer DataContext="{Binding}" Style="{StaticResource ElementContainerWithContextMenu}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type ViewModel:ElementListLayout}">
        <ItemsControl Focusable="False" ItemsSource="{Binding Elements}">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <StackPanel Focusable="False">
                        <ContentControl Content="{Binding Bindable}" Focusable="False" />
                    </StackPanel>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ViewModel:ListLayout}">
        <ItemsControl Focusable="False" ItemsSource="{Binding Elements}">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <StackPanel Focusable="False">
                        <ContentControl Content="{Binding Bindable}" Focusable="False" />
                    </StackPanel>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ViewModel:HorizontalListLayout}">
        <Grid
            x:Name="Grid"
            VerticalAlignment="Stretch"
            Controls:GridSplitterKeyAccelerator.DecrementKeyGesture="Alt+Ctrl+Left"
            Controls:GridSplitterKeyAccelerator.IncrementKeyGesture="Alt+Ctrl+Right"
            Controls:GridSplitterKeyAccelerator.TargetColumn="0"
            Focusable="False"
            Visibility="{Binding CanResize, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition
                    Width="{StaticResource SharedColumnWidth}"
                    MinWidth="{StaticResource SharedColumnMinWidth}"
                    SharedSizeGroup="{Binding ColumnName}" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="SplitterSizeGroup" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <ContentControl
                x:Name="Content"
                Grid.Column="0"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Content="{Binding Current}"
                Focusable="False" />

            <GridSplitter
                x:Name="Splitter"
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="1"
                Width="3"
                Background="Transparent"
                BorderBrush="Black"
                BorderThickness="1"
                Focusable="False"
                Opacity="0.15"
                ResizeBehavior="PreviousAndCurrent"
                ResizeDirection="Columns"
                ShowsPreview="True"
                Visibility="{Binding CanResize, Converter={StaticResource BooleanToVisibilityConverter}}" />

            <ContentControl
                Grid.RowSpan="2"
                Grid.Column="2"
                VerticalAlignment="Stretch"
                Content="{Binding}"
                Focusable="False">
                <ContentControl.ContentTemplate>
                    <DataTemplate>
                        <ContentControl
                            x:Name="Next"
                            VerticalAlignment="Stretch"
                            Focusable="False"
                            Visibility="Collapsed" />

                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{Binding HasNext}" Value="true">
                                <Setter TargetName="Next" Property="Content" Value="{Binding Next}" />
                                <Setter TargetName="Next" Property="Visibility" Value="{Binding CanResize, Converter={StaticResource BooleanToVisibilityConverter}}" />
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ContentControl.ContentTemplate>
            </ContentControl>

            <StackPanel
                Grid.Row="1"
                Grid.Column="0"
                Grid.ColumnSpan="3">
                <ContentControl Content="{Binding Contained}" Focusable="False" />
            </StackPanel>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding OwnsResizing}" Value="False">
                <Setter TargetName="Splitter" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ViewModel:TwoVerticalsLayout}">
        <StackPanel>
            <ContentControl Content="{Binding First}" Focusable="False" />
            <ContentControl Content="{Binding Second}" Focusable="False" />
        </StackPanel>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ViewModel:TwoColumnsLayout}">
        <Grid
            Controls:GridSplitterKeyAccelerator.DecrementKeyGesture="Alt+Ctrl+Left"
            Controls:GridSplitterKeyAccelerator.IncrementKeyGesture="Alt+Ctrl+Right"
            Controls:GridSplitterKeyAccelerator.TargetColumn="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" SharedSizeGroup="{Binding ColumnName}" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="SplitterSizeGroup" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <ContentControl
                Grid.Column="0"
                Content="{Binding Left}"
                Focusable="False" />

            <ContentControl
                Grid.Column="2"
                Content="{Binding Right}"
                Focusable="False" />

        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ViewModel:HeaderLayout}">
        <Grid
            Margin="12,0,12,6"
            Focusable="False"
            ScrollViewer.VerticalScrollBarVisibility="Disabled">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" SharedSizeGroup="SplitterSizeGroup" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <TextBlock
                Grid.Column="0"
                HorizontalAlignment="Stretch"
                FontStyle="Italic"
                FontWeight="Bold"
                Text="{Binding Title}" />

            <Controls:ContextMenuButton
                x:Name="AddButton"
                Grid.Column="2"
                Margin="0,0,0,0"
                HorizontalAlignment="Right"
                VerticalAlignment="Top"
                AutomationProperties.AutomationId="{Binding Title}"
                Style="{StaticResource ContextAdderButtonMenuStyle}"
                Visibility="{Binding Commands, Converter={StaticResource EnumerableToVisibilityConverter}, FallbackValue=Hidden}">
                <Controls:ContextMenuButton.ContextMenu>
                    <Controls:SelectionNotifyingContextMenu
                        ItemsSource="{Binding Commands}"
                        Placement="Right"
                        Style="{StaticResource ContextMenuStyle}" />
                </Controls:ContextMenuButton.ContextMenu>
            </Controls:ContextMenuButton>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ViewModel:SuggestedValuesBindableProperty}">
        <Grid HorizontalAlignment="Stretch">
            <Border
                x:Name="ErrorAdorner"
                Margin="-1"
                BorderBrush="Red"
                BorderThickness="1"
                Visibility="Collapsed" />
            <ComboBox
                x:Name="propertyDropdown"
                Grid.Column="0"
                AutomationProperties.Name="{Binding DisplayName}"
                IsEditable="true"
                IsEnabled="{Binding ReadOnly, Converter={StaticResource BooleanInverseConverter}}"
                IsReadOnly="{Binding SuggestedValuesEditable, Converter={StaticResource BooleanInverseConverter}}"
                ItemsSource="{Binding BindableSuggestedValues}"
                Style="{StaticResource BindablePropertyStyle}"
                Text="{Binding BindableValue, ValidatesOnDataErrors=true}"
                Validation.ErrorTemplate="{x:Null}"
                Visibility="Visible" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger SourceName="propertyDropdown" Property="Validation.HasError" Value="true">
                <Setter TargetName="ErrorAdorner" Property="Visibility" Value="Visible" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ViewModel:BindableProperty}">
        <Grid HorizontalAlignment="Stretch">
            <Border
                x:Name="ErrorAdorner"
                Margin="-1"
                BorderBrush="Red"
                BorderThickness="1"
                Visibility="Collapsed" />
            <TextBox
                x:Name="valueTextBox"
                AutomationProperties.Name="{Binding DisplayName}"
                IsReadOnly="{Binding ReadOnly}"
                Style="{StaticResource BindablePropertyStyle}"
                Text="{Binding BindableValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=true}"
                Validation.ErrorTemplate="{x:Null}" />
        </Grid>
        <DataTemplate.Triggers>
            <Trigger SourceName="valueTextBox" Property="Validation.HasError" Value="true">
                <Setter TargetName="ErrorAdorner" Property="Visibility" Value="Visible" />
            </Trigger>
            <DataTrigger Binding="{Binding ReadOnly}" Value="true">
                <Setter TargetName="valueTextBox" Property="IsEnabled" Value="false" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ViewModel:FrameworkEditorBindableProperty}">
        <ContentControl Content="{Binding Editor}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type ViewModel:PopupEditorBindableProperty}">
        <DockPanel>
            <Button
                x:Name="propertyPopupButton"
                Width="15"
                Height="20"
                HorizontalAlignment="Right"
                VerticalAlignment="Top"
                Command="{Binding LaunchEditor}"
                CommandParameter="{Binding}"
                Content="..."
                DockPanel.Dock="Right"
                Focusable="true"
                IsEnabled="{Binding ReadOnly, Converter={StaticResource BooleanInverseConverter}}" />
            <Grid HorizontalAlignment="Stretch">
                <Border
                    x:Name="ErrorAdorner"
                    Margin="-1"
                    BorderBrush="Red"
                    BorderThickness="1"
                    Visibility="Collapsed" />
                <TextBox
                    x:Name="valueTextBox"
                    AutomationProperties.Name="{Binding DisplayName}"
                    IsEnabled="{Binding ReadOnly, Converter={StaticResource BooleanInverseConverter}}"
                    IsReadOnly="{Binding TextReadOnly}"
                    Style="{StaticResource BindablePropertyStyle}"
                    Text="{Binding BindableValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=true}"
                    Validation.ErrorTemplate="{x:Null}" />
            </Grid>

        </DockPanel>
        <DataTemplate.Triggers>
            <Trigger SourceName="valueTextBox" Property="Validation.HasError" Value="true">
                <Setter TargetName="ErrorAdorner" Property="Visibility" Value="Visible" />
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="ActualProperty">
        <Grid HorizontalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition
                    Width="Auto"
                    MinWidth="50"
                    SharedSizeGroup="PropLabel" />
                <ColumnDefinition Width="175*" MinWidth="50" />
            </Grid.ColumnDefinitions>

            <TextBlock
                Grid.Column="0"
                Margin="5,0,5,0"
                HorizontalAlignment="Left"
                VerticalAlignment="Top"
                Text="{Binding DisplayName}"
                TextTrimming="CharacterEllipsis"
                ToolTip="{Binding Description}" />

            <ContentControl
                Grid.Column="1"
                Content="{Binding BindableProperty}"
                Focusable="False" />

        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Hidden}" Value="True">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>


    <DataTemplate x:Key="ChildPropertyTemplate" DataType="{x:Type ViewModel:Property}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
            </Grid.RowDefinitions>

            <ContentControl
                Grid.Column="1"
                Content="{Binding}"
                ContentTemplate="{StaticResource ActualProperty}"
                Focusable="False" />

        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Hidden}" Value="True">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ViewModel:Property}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="12" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ToggleButton
                x:Name="ShowChildProperties"
                Grid.Column="0"
                Width="12"
                Height="6"
                Margin="0,-6,0,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Background="{DynamicResource NormalBrush}"
                IsChecked="{Binding PropertiesShown}"
                OverridesDefaultStyle="True"
                Template="{DynamicResource ExpanderToggleButton}"
                Visibility="{Binding HasChildProperties, Converter={StaticResource BooleanToVisibilityConverter}}" />

            <ContentControl
                Grid.Column="1"
                Content="{Binding}"
                ContentTemplate="{StaticResource ActualProperty}"
                Focusable="False" />

            <ItemsControl
                Grid.Row="1"
                Grid.Column="1"
                Focusable="False"
                ItemTemplate="{StaticResource ActualProperty}"
                ItemsSource="{Binding ChildProperties}"
                Visibility="{Binding IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=ShowChildProperties, Mode=TwoWay}" />

        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Hidden}" Value="True">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate DataType="{x:Type ViewModel:SectionViewModel}">
        <Controls:SectionModelContainer DataContext="{Binding}">
            <Controls:SectionModelContainer.ContextMenu>
                <Controls:SelectionNotifyingContextMenu ItemsSource="{Binding Commands}" Style="{StaticResource ContextMenuStyle}" />
            </Controls:SectionModelContainer.ContextMenu>
        </Controls:SectionModelContainer>
    </DataTemplate>

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2"
                        SnapsToDevicePixels="true"
                        Stroke="Black"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="ButtonNormalBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#F3F3F3" />
        <GradientStop Offset="0.5" Color="#EBEBEB" />
        <GradientStop Offset="0.5" Color="#DDDDDD" />
        <GradientStop Offset="1" Color="#CDCDCD" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070" />

    <Style x:Key="DeleteButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ContentControl
                        x:Name="DeleteButtonVisual"
                        Background="{DynamicResource BackgroundBrush}"
                        Focusable="False"
                        Foreground="{DynamicResource ElementCommandNormalBrush}">
                        <Canvas
                            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                            Width="17"
                            Height="17">
                            <Path
                                Canvas.Left="-0.500002"
                                Canvas.Top="-0.499999"
                                Width="18"
                                Height="18"
                                Data="F1 M 3,9.53674e-007L 14,9.53674e-007C 15.6569,9.53674e-007 17,1.34315 17,3L 17,14C 17,15.6569 15.6569,17 14,17L 3,17C 1.34314,17 -1.7257e-006,15.6569 -1.7257e-006,14L -1.7257e-006,3C -1.7257e-006,1.34315 1.34314,9.53674e-007 3,9.53674e-007 Z "
                                Fill="#00FFFFFF"
                                Stretch="Fill"
                                Stroke="#00949494"
                                StrokeLineJoin="Round" />
                            <Path
                                Canvas.Left="-0.500002"
                                Canvas.Top="-0.499999"
                                Width="18"
                                Height="18"
                                Data="F1 M 3,9.53674e-007L 14,9.53674e-007C 15.6569,9.53674e-007 17,1.34315 17,3L 17,14C 17,15.6569 15.6569,17 14,17L 3,17C 1.34314,17 -1.7257e-006,15.6569 -1.7257e-006,14L -1.7257e-006,3C -1.7257e-006,1.34315 1.34314,9.53674e-007 3,9.53674e-007 Z "
                                Stretch="Fill"
                                Stroke="{DynamicResource ElementCommandNormalBrush}"
                                StrokeLineJoin="Round" />

                            <Path
                                Canvas.Left="2.50829"
                                Canvas.Top="2.50828"
                                Width="11.9834"
                                Height="11.9834"
                                Data="F1 M 12.9917,4.00828L 4.00829,12.9917"
                                Stretch="Fill"
                                Stroke="{DynamicResource ElementCommandShadowBrush}"
                                StrokeEndLineCap="Round"
                                StrokeLineJoin="Round"
                                StrokeStartLineCap="Round"
                                StrokeThickness="3" />
                            <Path
                                Canvas.Left="2.5083"
                                Canvas.Top="2.50828"
                                Width="11.9834"
                                Height="11.9834"
                                Data="F1 M 4.0083,4.00828L 12.9917,12.9917"
                                Stretch="Fill"
                                Stroke="{DynamicResource ElementCommandShadowBrush}"
                                StrokeEndLineCap="Round"
                                StrokeLineJoin="Round"
                                StrokeStartLineCap="Round"
                                StrokeThickness="3" />

                            <Path
                                Canvas.Left="3.00829"
                                Canvas.Top="3.00828"
                                Width="10.9834"
                                Height="10.9834"
                                Data="F1 M 12.9917,4.00828L 4.00829,12.9917"
                                Stretch="Fill"
                                Stroke="{Binding Foreground, ElementName=DeleteButtonVisual}"
                                StrokeEndLineCap="Round"
                                StrokeLineJoin="Round"
                                StrokeStartLineCap="Round"
                                StrokeThickness="2" />
                            <Path
                                Canvas.Left="3.0083"
                                Canvas.Top="3.00828"
                                Width="10.9834"
                                Height="10.9834"
                                Data="F1 M 4.0083,4.00828L 12.9917,12.9917"
                                Stretch="Fill"
                                Stroke="{Binding Foreground, ElementName=DeleteButtonVisual}"
                                StrokeEndLineCap="Round"
                                StrokeLineJoin="Round"
                                StrokeStartLineCap="Round"
                                StrokeThickness="2" />
                        </Canvas>
                    </ContentControl>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="DeleteButtonVisual" Property="Foreground" Value="{DynamicResource ElementCommandMouseOverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CommandMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="IsEnabled" Value="{Binding ItemsSource, RelativeSource={RelativeSource Self}, Converter={StaticResource EnumerableToBooleanConverter}}" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type MenuItem}">
                    <Setter Property="AutomationProperties.AutomationId" Value="{Binding Title}" />
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Label Content="{Binding Title}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>